datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}
model Profile {
  id          String    @id @default(uuid())
  displayname String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  avatar      String?
  bio         String?
  location    String?
  phone String?
}
model User {
  id                        String          @id @default(uuid())
  email                     String          @unique
  name                      String?
  online                   Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  role                      Role            @default(CLIENT)
  password                  String
  verified                  Boolean         @default(false)
  profile                   Profile?
  clientCases               Case[]          @relation("ClientCases")
  lawyerCases               Case[]          @relation("LawyerCases")
  sentCaseRequests          CaseRequest[]   @relation("SentCaseRequests")
  receivedCaseRequests      CaseRequest[]   @relation("ReceivedCaseRequests")
  sentFriendRequests          FriendRequest[]   @relation("SentFriendRequests")
  receivedFriendRequests      FriendRequest[]   @relation("ReceivedFriendRequests")
  senderId                  String?
  attachments               Attachment[]    @relation("UserAttachments") 
  sentMessages              Message[]       @relation("SentMessages")
  receivedMessages          Message[]       @relation("ReceivedMessages")
  lawyerProfile             LawyerProfile?
  comments                  Comment[]       @relation("userComments") 
}
model Friendship {
  id       String @id @default(uuid())
  userId   String
  friendId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model FriendRequest {
  id            BigInt        @id @default(autoincrement())
  userId        String
  receiverId    String
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sender        User          @relation("SentFriendRequests", fields: [userId], references: [id])
  receiver      User          @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  case        Case     @relation("caseComments", fields: [caseId], references: [id]) 
  caseId      BigInt
  user        User     @relation("userComments", fields: [userId], references: [id]) 
  userId      String
}
model Case {
  id            BigInt              @id @default(autoincrement())
  status        CaseStatus
  title         String
  description   String
  clientId      String
  category     CaseCategory
  lawyerId      String?
  client        User        @relation("ClientCases", fields: [clientId], references: [id])
  lawyer        User?       @relation("LawyerCases", fields: [lawyerId], references: [id])
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  caseDetails   CaseDetail[]
  attachments   Attachment[]
  caseRequests  CaseRequest[]  
  comments      Comment[]   @relation("caseComments") 
}
enum CaseCategory {
  FAMILY
  CRIMINAL
  CIVIL
  LABOUR
  PROPERTY
  BUSINESS
  OTHER
}

model LawyerProfile {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @unique
  isVerified Boolean @default(false)
  description String
  experience  String
  education   String
  specialization String
  verification LawyerVerification?
  rating      Float?
  status  AvailabilityStatus @default(AVAILABLE)
  reviews     LawyerReview[] 
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  contact     LawyerContact?
}
model LawyerContact {
  id          String @id @default(uuid())
  lawyerId    String@unique
  lawyer      LawyerProfile @relation(fields: [lawyerId], references: [id])
 email       String
   website String?
  facebook    String?
  linkedin    String?
  instagram   String?
  phone       String?
  officeAddress String?
}
model LawyerVerification {
  id          String         @id @default(uuid())
  lawyerId    String         @unique
  lawyer      LawyerProfile  @relation(fields: [lawyerId], references: [id])
  cnic        String
  verified   Boolean        @default(false)
  barCouncilRegistrationNumber String
  certificateVerificationId String
  lawGatPass  Boolean
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  licenseNumber String? 
  licenseExpiryDate DateTime? 
  practiceArea String? 
}


enum AvailabilityStatus {
  AVAILABLE
  BUSY
  OFFLINE
}
model LawyerReview {
  id          String         @id @default(uuid())
  lawyer      LawyerProfile  @relation(fields: [lawyerId], references: [id])
  lawyerId    String
  score      Float
  comment String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  type        String
  receiverId  String
  createdAt   DateTime  @default(now())
  seen Boolean @default(false)
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
model CaseDetail {
  id              BigInt    @id @default(autoincrement())
  caseId          BigInt
  case            Case      @relation(fields: [caseId], references: [id])
  progress        String
  updateTime      DateTime  @default(now())
  notes           String?
}

model Attachment {
  id              BigInt    @id @default(autoincrement())
  caseId          BigInt
  case            Case      @relation(fields: [caseId], references: [id])
  fileUrl         String
  fileName        String
  userId          String    // Add user ID field
  user            User      @relation("UserAttachments",fields: [userId], references: [id])
  uploadTime      DateTime  @default(now())
}
model CaseRequest {
  id            BigInt              @id @default(autoincrement())
  clientId      String
  lawyerId      String
  caseId        BigInt              
  status        RequestStatus       @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  client        User                @relation("SentCaseRequests", fields: [clientId], references: [id])
  lawyer        User                @relation("ReceivedCaseRequests", fields: [lawyerId], references: [id])
  case          Case                @relation(fields: [caseId], references: [id]) 
}
model EmailVerification {
  id                BigInt      @id @default(autoincrement())
  email             String      @unique
  verificationToken String
  code              Int
  userId String @unique
}
model Notification {
  id          String    @id @default(uuid())
  userId      String
  
  message     String   
  createdAt   DateTime  @default(now())
  read        Boolean   @default(false) 
  avatarUrl String?
  name String?

}


enum Role {
  LAWYER
  CLIENT
}
enum CaseStatus {
  OPEN
  REVIEW
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  RESOLVED
  DISMISSED
  CLOSED
  PENDING
}
enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

