datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
// schema.prisma



model Profile {
  id          String    @id @default(uuid())
  displayname String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  avatar      String?
  bio         String?
  location    String?
}
// schema.prisma

model User {
  id                        String      @id @default(uuid())
  email                     String      @unique
  name                      String?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  role                      Role        @default(CLIENT)
  password                  String
  verified                  Boolean     @default(false)
  profile                   Profile?
  clientCases               Case[]      @relation("ClientCases")
  lawyerCases               Case[]      @relation("LawyerCases")
  sentFriendRequests        FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests    FriendRequest[] @relation("ReceivedFriendRequests")
  sentCaseRequests          CaseRequest[]   @relation("SentCaseRequests")
  receivedCaseRequests      CaseRequest[]   @relation("ReceivedCaseRequests")
  user1Friendships          Friendship[]   @relation("User1Friendships")
  user2Friendships          Friendship[]   @relation("User2Friendships")
  
  // Add the senderId field
  senderId                  String?
  
  // Define the opposite relation for sent messages
  sentMessages              Message[]    @relation("SentMessages")
  receivedMessages          Message[]    @relation("ReceivedMessages")
}



model Message {
  id          String    @id @default(uuid())
  content     String
  senderId    String
  receiverId  String
  createdAt   DateTime  @default(now())

  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
model Friendship {
  id         String     @id @default(uuid())
  user1Id    String
  user2Id    String
  createdAt  DateTime   @default(now())

  user1      User       @relation("User1Friendships", fields: [user1Id], references: [id])
  user2      User       @relation("User2Friendships", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id            BigInt              @id @default(autoincrement())
  senderId      String
  receiverId    String
  status        RequestStatus       @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  sender        User                @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver      User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}
model CaseDetail {
  id              BigInt    @id @default(autoincrement())
  caseId          BigInt
  case            Case      @relation(fields: [caseId], references: [id])
  progress        String
  updateTime      DateTime  @default(now())
  notes           String?
}
model Case {
  id            BigInt              @id @default(autoincrement())
  status          CaseStatus
  title           String
  description     String
  clientId        String
  lawyerId        String?
  client          User        @relation("ClientCases", fields: [clientId], references: [id])
  lawyer          User?       @relation("LawyerCases", fields: [lawyerId], references: [id])
  updatedAt       DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  caseDetails     CaseDetail[]
  attachments     Attachment[]
  caseRequests    CaseRequest[]  // Add the opposite relation field referencing the CaseRequest model
}
model CaseRequest {
  id            BigInt              @id @default(autoincrement())
  clientId      String
  lawyerId      String
  caseId        BigInt              // Ensure that the type matches the type of `id` in the `Case` model
  status        RequestStatus       @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  client        User                @relation("SentCaseRequests", fields: [clientId], references: [id])
  lawyer        User                @relation("ReceivedCaseRequests", fields: [lawyerId], references: [id])
  case          Case                @relation(fields: [caseId], references: [id]) // Ensure the type matches `id` in the `Case` model
}



model EmailVerification {
  id                BigInt      @id @default(autoincrement())
  email             String      @unique
  verificationToken String
  code              Int
  userId String @unique
}


model Notification {
  id          String    @id @default(uuid())
  userId      String    // ID of the user associated with this notification
  message     String    // Message content of the notification
  createdAt   DateTime  @default(now())
  read        Boolean   @default(false) // Indicates whether the notification has been read
}

model Attachment {
  id              BigInt    @id @default(autoincrement())
  caseId          BigInt
  case            Case      @relation(fields: [caseId], references: [id])
  fileUrl         String
  fileName        String
  uploadTime      DateTime  @default(now())
}

enum Role {
  LAWYER
  CLIENT
}

enum CaseStatus {
  OPEN
  REVIEW
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  RESOLVED
  DISMISSED
  CLOSED
  PENDING
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
